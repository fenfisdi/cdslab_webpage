import { isEmpty } from 'lodash'
import { useEffect, useState } from 'react'
import { useHistory } from 'react-router-dom'
import { useStore } from '../../../store/storeContext'
import { getStateWithQueryparams } from '../../CompartmentalModelPage/common'
import { useAgentsVulnerabilityGroupsActions } from '@actions/agentsVulnerabilityGroupsActions'

export const useAgentsVulnerabilityGroupsPageState = () => {
  
  const history = useHistory()
  const [idConfiguration, setIdConfiguration] = useState('')
  const [isValid, setIsValid] = useState(false)
  
  const {
    state: {      
      agentsVulnerabilityGroups: {
        data,
        error
      }
    },
    dispatch
  } = useStore()

  const parseInformationVulnerabilityGroupsModel =(arrayVulnerability=[])=>{
    return arrayVulnerability.map((vulnerability)=>{
      return {
        name:vulnerability.name,                
      }
    })

  }

  const checkVulnerabilityGroupsList = (vulnerabilityGroupsList)=>{
    const itemsConfigured =[]
    vulnerabilityGroupsList.forEach((item) => {       
      item.name.trim().length>0 && itemsConfigured.push(true)            
    })      
    return itemsConfigured.length == vulnerabilityGroupsList.length 
  }
  
  const { saveVulnerabilityGroupsInformation, getVulnerabilityGroupsInformation } = useAgentsVulnerabilityGroupsActions(dispatch)
  
  const schemaItems={
    name: ''    
  }
 
  const initialItems = [{...schemaItems}]

  const tableColumns = [
    { title: 'Vulnerability Groups Name', att: 'name', type: 'text',inputProps: { fullWidth: true }  },
  ]

  const [items, setItems] = useState(initialItems)


  useEffect(()=>{    
    if(items.length>0){           
      setIsValid(checkVulnerabilityGroupsList(items)) 
    }
  },[items])

  useEffect(()=>{
    const params = getStateWithQueryparams(history)    
    if(!isEmpty(params)){
      setIdConfiguration(params.idConfiguration)
    }
  },[history])

  useEffect(()=>{     
    if(data == null && !error && idConfiguration!=''){
      getVulnerabilityGroupsInformation(idConfiguration)
    }else if(data != null && data.length > 0 && !error){
      console.log('ARRAYR VulnerabilityGroups::::::::::::::::::::::>',data)      
      setItems(parseInformationVulnerabilityGroupsModel(data))
    }
  },[data,error,idConfiguration])
  

  const redirectToSusceptibilityGroupsPage = () => {
    
    history.push({
      pathname: 'agentsConfigurationMessage',
      search: `?idConfiguration=${idConfiguration}`
    }) 
  }

  const handleClickSaveVulnerabilityGroups =(information)=>{    
    console.log(information)
    saveVulnerabilityGroupsInformation(information,idConfiguration).then(()=>{      
      getVulnerabilityGroupsInformation(idConfiguration)
      redirectToSusceptibilityGroupsPage()
    })
    
  }
  
  return {
    tableColumns,
    items, 
    setItems,
    schemaItems,
    handleClickSaveVulnerabilityGroups,
    isValid
  }
}
