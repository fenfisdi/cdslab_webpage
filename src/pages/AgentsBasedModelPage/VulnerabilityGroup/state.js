import React, { useContext, useEffect, useState } from 'react'
import DistributionsSettings from '../../../components/AgentsModels/AgentDiseaseState/DistributionsSettings'
import SettingsComponent from '../../../components/AgentsModels/AgentDiseaseState/SettingsComponent'
import OptionButtons from '../../../components/ui/OptionButtons'
import NestingContext from '../../../context/Nesting/nestingContext'
import { descriptions } from './constants'

export const vulnerabilityGroupState = () => {
  const [value, setValue] = useState(0)
  const [modal, setModal] = useState(false)

  const nestingContext = useContext(NestingContext)
  const {
    VulnerabilityDistanceUnits,
    loadVulnerabilityUnitDistance
  } = nestingContext

  useEffect(() => {
    loadVulnerabilityUnitDistance()
  }, [])

  console.log(VulnerabilityDistanceUnits)

  const handleSliderChange = (event, newValue) => {
    setValue(newValue)
  }

  const [valueTwo, setValueTwo] = useState(0)

  const handleSliderTwoChange = (event, newValue) => {
    setValueTwo(newValue)
  }

  const [json, setJson] = useState({
    ContagionDynamics: false,
    SpreadRadius: '',
    DistanceUnits: '',
    stateOne: 0
  })

  const handleChange = ({ target }) => {
    const { value, name } = target
    setJson((prevState) => ({
      ...prevState,
      [name]: value
    }))
  }

  const handleSwitchChange = ({ target }) => {
    const { name, checked } = target
    setJson((prevState) => ({
      ...prevState,
      [name]: checked
    }))
  }

  const openModal = () => {
    setModal(true)
  }

  const closeModal = () => {
    setModal(false)
  }

  const tableParameters = [
    ['Parameter', 'Value'],
    [
      [
        {
          type: 'label-valid',
          content: 'Spread Radius',
          show: true,
          value: false
        }, {
          type: 'input',
          placeholder: '',
          show: true,
          value: json.SpreadRadius,
          name: 'SpreadRadius',
          handleOnChange: handleChange
        }, {
          type: 'select',
          title: 'Distance Unit',
          show: true,
          name: 'DistanceUnits',
          value: json.DistanceUnits,
          handleOnChange: handleChange,
          options: [{ label: 'sdf', value: 'asd' }],
          placeholder: 'distance units'
        }
      ]
    ]
  ]

  const row = [
    {
      type: 'label-valid',
      content: 'Spread Radius',
      show: true,
      value: false
    }, {
      type: 'slider',
      title: 'Distance Unit',
      value: value,
      disabled: true,
      handleOnChange: handleSliderChange,
      show: true
    }, {
      type: 'slider',
      title: 'Distance Unit',
      show: true,
      placeholder: 'distance units'
    }, {
      type: 'component',
      title: 'Distance Unit',
      component: [() =>
        <OptionButtons
          showConfig={true}
          showCheck={true}
          showInfo={true}
          configModal={openModal}
        />],
      show: true
    }
  ]

  const rowTwo = [
    {
      type: 'label-valid',
      content: 'Spread Radius',
      show: true,
      value: false
    }, {
      type: 'slider',
      title: 'Distance Unit',
      value: valueTwo,
      disabled: true,
      handleOnChange: handleSliderTwoChange,
      show: true
    }, {
      type: 'slider',
      title: 'Distance Unit',
      show: true,
      placeholder: 'distance units'
    }, {
      type: 'component',
      title: 'Distance Unit',
      component: [() =>
        <OptionButtons
          showConfig={true}
          showCheck={true}
          showInfo={true}
        />],
      show: true
    }
  ]

  const initialItemsDistribution = [
    {
      name: 'Time distribution',
      description: descriptions.TimeDistribution,
      state:''
    },
    {
      name: 'Alertness',
      description: '',
      state: ''
    }
  ]

  const tableTransitionsParameters = [
    ['Turns into', 'Probability', 'Immunization gain', 'Immunization time distribution'],
    [ row, rowTwo, row, row, row ]
  ]

  return [
    tableParameters,
    initialItemsDistribution,
    tableTransitionsParameters,
    handleSwitchChange,
    json,
    modal,
    closeModal
  ]
}
