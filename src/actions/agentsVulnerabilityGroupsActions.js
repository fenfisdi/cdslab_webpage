import { getVulnerabilityGroupsInformationService, saveVulnerabilityGroupsInformationService } from '../services/agentsVulnerabilityGroupsServices'
import { AGENTS_VULNERABILITY_GROUPS_MODEL_GET_INFORMATION_ERROR, AGENTS_VULNERABILITY_GROUPS_MODEL_GET_INFORMATION_SUCCESS, AGENTS_VULNERABILITY_GROUPS_MODEL_RESET_INFORMATION_SUCCESS } from './types/agentsVulnerabilityGroupsTypes'


export const useAgentsVulnerabilityGroupsActions = (dispatch) => {
  
  const DtoVulnerabilityGroupsSuccess =(agesVulnerabilityGroups)=> (
    {
      data:agesVulnerabilityGroups == null ? []: agesVulnerabilityGroups,
    }
  )

  const DtoVulnerabilityGroupsError =(error)=> (
    {
      message:error.message
    }
  )
    
  const saveVulnerabilityGroupsInformation =(agentsInformation,idConfiguration)=>{
    
    return saveVulnerabilityGroupsInformationService(agentsInformation,idConfiguration)
  }

  const getVulnerabilityGroupsInformation =(idConfiguration)=>{
    getVulnerabilityGroupsInformationService(idConfiguration).then((response)=>{       
      dispatch({
        type: AGENTS_VULNERABILITY_GROUPS_MODEL_GET_INFORMATION_SUCCESS,
        payload:DtoVulnerabilityGroupsSuccess(response.data.data)
      })
      
    }).catch((error)=>{
      if (error.response) {
        const { response } = error        
        dispatch({
          type: AGENTS_VULNERABILITY_GROUPS_MODEL_GET_INFORMATION_ERROR,
          payload: DtoVulnerabilityGroupsError(response.data)
        })
      }else if(error.request) {
        dispatch({
          type: AGENTS_VULNERABILITY_GROUPS_MODEL_GET_INFORMATION_ERROR,
          payload:{detail:'The request was made but no response was received'}
        })
      }
    })
  }

  const setResetVulnerabilityGroupsInformation = () => {
    dispatch({
      type: AGENTS_VULNERABILITY_GROUPS_MODEL_RESET_INFORMATION_SUCCESS,
    })
  }

  return {
    saveVulnerabilityGroupsInformation,
    getVulnerabilityGroupsInformation,
    setResetVulnerabilityGroupsInformation
  }
}